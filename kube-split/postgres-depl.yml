apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: app
spec:
  ports:
    - port: 5432
  selector:
    app: app
    tier: postgres

---
# create/provision/allocate space for a volume
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pg-pv-vol
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/tmp/data"

---
# we bind the resource PV to the pod
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pg-pvc-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-dep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app

  template:
    metadata:
      name: my-pg
      labels:
        app: app
    spec:
      volumes:
        - name: pg-storage
          persistentVolumeClaim:
            claimName: pg-pvc-claim
      containers:
        - name: pg-container
          image: postgres:13.3-alpine
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POSTGRES_USER
              value: postgres
              # valueFrom:
              #   secretKeyRef:
              #     name: db-user
              #     key: username
            - name: POSTGRES_PASSWORD
              value: dockerpassword
              # valueFrom:
              #   secretKeyRef:
              #     name: db-user-pass
              #     key: password
            - name: POSTGRES_DB
              value: ortkcbqt
            - name: PGDATA
              value: /var/lib/postgresql/data
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: pg-storage
      # volumes:
      #   - name: pg-pv
      #     persistentVolumeClaim:
      #       claimName: pg-pvc
