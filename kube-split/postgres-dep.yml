apiVersion: v1
kind: Service
metadata:
  name: pg-svc
  labels:
    app: pg #### pg # <- must match with the pod
spec:
  ports:
    - protocol: TCP
      port: 5432 # <- service port opened for Rails
  selector:
    # the set of pods with name 'pg' is targeted by this service
    app: pg

---
# Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  # about the deployment itself. Gives a name of the DEPLOYMENT
  name: pg-dep
  labels:
    app: pg
spec: # of the deployment
  serviceName: pg-dep
  replicas: 1
  selector:
    # the deployment must match all pods with label "app: pg"
    matchLabels:
      # the label for the POD that the deployment is targeting
      app: pg # <- must match with the template for the pod, below
  template: # blue print of a pod
    metadata:
      name: pg-pod
      # label for the POD that the deployment is deploying
      labels:
        app: pg # <- must match SERVICE
    spec:
      volumes:
        - name: pg-pv # must match pv
          persistentVolumeClaim:
            claimName: pg-pvc # msut match pvc
      containers:
        - name: pg-container
          image: postgres:13.3-alpine
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              memory: "100Mi"
              cpu: "16m"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: $(PGDATA)
              name: pg-pv # must match pv
              readOnly: false
          envFrom:
            - configMapRef:
                name: config
            - secretRef:
                name: secrets
          # readinessProbe:
          #   exec:
          #     command: [
          #         "bash",
          #         "-c",
          #         "pg_isready",
          #         "-U",
          #         $POSTGRES_USER
          #         "-h",
          #         "localhost",
          #         "-p",
          #         "5432",
          #       ]
          #     # command:
          #     #   - psql
          #     #   - "- U"
          #     #   - "postgres"
          #     #   - "-d"
          #     #   - "ortkcbqt"
          #     #   - "-c"
          #     #   - "SELECT 1;"
          #     initialDelaySeconds: 60
          #     periodSeconds: 60
          #     timeoutSeconds: 15
          #     failureThreshold: 3000
          #  psql -w -U $POSTGRES_USER -h localhost -d $POSTGRES_DB -c 'SELECT 1;'
          # pg_isready -U $POSTGRES_USER -h localhost -p 5432
---
# we bind the resource PV to the pod
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-pvc
spec:
  # storageClassName: standard
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
