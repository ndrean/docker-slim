version: "3"

x-app: &common
  env_file: .env
  image: ndrean/rails-dc
  # build:
  #   context: .
  #   dockerfile: _alpine.prod.Dockerfile
  #   args:
  #     - RUBY_VERSION=3.0.2-alpine
  #     - BUNDLER_VERSION=2.2.24
  #     # - NODE_VERSION=14
  #     - NODE_ENV=production
  #     - RAILS_ENV=production

services:
  pg:
    image: postgres:13.3-alpine
    ports:
      - 5432
    environment:
      - POSTGRES_PASSWORD=dockerpassword
      # - POSTGRES_PASSWORD=fhSBQrF3Dzl9WWA1FfRIjQmU7u3pBtTd
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./pg/init-user.sql:/docker-entrypoint-initdb.d/init-user.sql:ro
      # - ./pg/init-remote-user.sql:/docker-entrypoint-initdb.d/init-remote-user.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redisdb:
    image: redis:6.2.4-alpine
    ports:
      - 6379
    env_file: .env
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - redis_data:/data
      - ./redis/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  sidekiq:
    <<: *common
    entrypoint: ["./app-pid.sh"]
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
    depends_on:
      redisdb:
        condition: service_healthy

  webserver:
    image: ndrean/nginx-dc
    # build:
    # context: .
    # dockerfile: ./_nginx.Dockerfile
    ports:
      - 9000:9000
    command: ["nginx", "-g", "daemon off;"]
    depends_on:
      - app

  app:
    <<: *common
    depends_on:
      pg:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    ports:
      - 4000:3000
    # <- create/migrate
    entrypoint: [./manage-db.sh]
    command: ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
    tmpfs:
      - /tmp

  cable:
    <<: *common
    command: ["bundle", "exec", "puma", "-p", "28080", "./cable/config.ru"]
    ports:
      - "28080:28080"
    depends_on:
      redisdb:
        condition: service_healthy

volumes:
  redis_data: {}
  pg_data: {}
